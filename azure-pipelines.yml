trigger:
  branches:
    include:
      - main   # adjust branch as needed

variables:
  # Change these to match your setup
  acrName: 'unykedaiacr'                 # your ACR name
  imageName: 'ollama-flask-api'          # name of the docker image
  tag: 'latest'                # tag with pipeline build id
  resourceGroup: 'rg-ai'     # Azure RG for the container
  containerName: 'ollama-api'            # name of container instance
  location: 'westeurope'                 # ACI location/region

stages:
- stage: Build
  displayName: Build and Push to ACR
  jobs:
  - job: BuildAndPush
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: AzureCLI@2
      displayName: 'Login to Azure and ACR'
      inputs:
        azureSubscription: 'your-service-connection' # service connection name in DevOps
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "Logging in to ACR..."
          az acr login --name $(acrName)

    - task: Docker@2
      displayName: 'Build and Push Docker Image'
      inputs:
        containerRegistry: 'your-acr-service-connection' # Docker Registry service connection
        repository: '$(acrName).azurecr.io/$(imageName)'
        command: 'buildAndPush'
        Dockerfile: '**/Dockerfile'
        tags: |
          $(tag)

- stage: Deploy
  displayName: Deploy to ACI
  dependsOn: Build
  jobs:
  - job: DeployACI
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: AzureCLI@2
      displayName: 'Deploy Container Instance'
      inputs:
        azureSubscription: 'your-service-connection'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "Creating Container Instance..."
          az container create \
            --resource-group $(resourceGroup) \
            --name $(containerName) \
            --image $(acrName).azurecr.io/$(imageName):$(tag) \
            --registry-login-server $(acrName).azurecr.io \
            --cpu 2 --memory 4 \
            --ports 8000 \
            --location $(location) \
            --restart-policy Always \
            --environment-variables HUGGING_FACE_HUB_TOKEN=$(HUGGING_FACE_HUB_TOKEN)